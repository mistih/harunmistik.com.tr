<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>liam's blog</title>
      <link>https://liams.me</link>
      <description>programming, software, books</description>
      <atom:link href="https://liams.me/index.xml" rel="self" type="application/rss+xml" />
      <language>en-us</language>
      <copyright>Creative Commons BY-NC-SA 4.0</copyright>
      <item>
<title>Binary search for bugs</title>
<description>&lt;p&gt;I recently encountered a build failure in a dependency of a Rust crate I was trying to install which led me to be introduced to a git command called &lt;code&gt;bisect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From the official docs found over at &lt;a href="https://git-scm.com/docs/git-bisect"&gt;git-scm.com&lt;/a&gt;, the small description under the name heading reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use binary search to find the commit that introduced a bug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds super cool right? Using this feature I was able to track down the commit that introduced the bug in less than 6 steps.&lt;/p&gt;
&lt;p&gt;Here’s a general overview of how this command works:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;git bisect start&lt;/code&gt; to start the bisect session&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specify a bad commit (usually HEAD) using &lt;code&gt;git bisect bad &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specify a good commit using &lt;code&gt;git bisect good &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will kick off the binary search and pick a new commit in which you can evaluate using &lt;code&gt;git bisect good&lt;/code&gt; or &lt;code&gt;git bisect bad&lt;/code&gt;, in between the two endpoints.&lt;/p&gt;
&lt;p&gt;It is clear that using this method, over the linear scan approach, can save a tremendous amount of time in the quest for finding where a breaking change was introduced.&lt;/p&gt;</description>
<link>https://liams.me/posts/Binary_search_for_bugs/</link>
<pubDate>Mon, 15 Feb 2021 22:04:00 +0000</pubDate>
<guid>https://liams.me/posts/Binary_search_for_bugs/</guid>
</item>
<item>
<title>How I read blogs</title>
<description>&lt;p&gt;I have recently gotten into the habit of reading more blogs, in particular, ones featured on &lt;a href="https://news.ycombinator.com/news"&gt;HackerNews&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reading books, personally, has been a difficult habit to cultivate over time, which I mainly attribute to the periodic feelings of being “stuck” or bored on a certain set of books. Blogs, however, offer a condensed read making them efficient and often amusing sources of information.&lt;/p&gt;
&lt;p&gt;My typical sourcing routine would usually just consist of scrolling through HackerNews, potentially seeing something that peaked my interest and reading it, or realizing I didn’t have the time and putting the url off in a &lt;code&gt;.txt&lt;/code&gt; file somewhere.&lt;/p&gt;
&lt;p&gt;Realizing the severe lack of efficiency present in this routine, I thought about how to make it better. First, by asking the question: what were the things I didn’t like?&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Having to scroll through articles myself&lt;/li&gt;
&lt;li&gt;Reading on mobile or desktop&lt;/li&gt;
&lt;li&gt;Having no effortless &lt;code&gt;like&lt;/code&gt; or &lt;code&gt;archive&lt;/code&gt; feature&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To address these problems I chose to try out &lt;a href="https://www.instapaper.com/"&gt;&lt;code&gt;Instapaper&lt;/code&gt;&lt;/a&gt; and build a simple tool called &lt;a href="https://github.com/terror/hackerpaper"&gt;&lt;code&gt;hackerpaper&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instapaper has a feature that let’s you send articles to your Kindle, which makes reading blogs much more comfortable. Moreover, the built in &lt;code&gt;like&lt;/code&gt; and &lt;code&gt;archive&lt;/code&gt; features carryover to the Kindle as well, making it a seamless process of &lt;code&gt;read&lt;/code&gt; -&amp;gt; &lt;code&gt;archive or like&lt;/code&gt; -&amp;gt; &lt;code&gt;repeat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To solve the issue of having to scroll through articles myself and add them to Instapaper, as mentioned above, I built &lt;code&gt;hackerpaper&lt;/code&gt;. This tool sends HackerNews articles to Instapaper with certain filters such as type, subdomains or a specific article id.&lt;/p&gt;
&lt;p&gt;I run a &lt;code&gt;cron job&lt;/code&gt; that sends the articles to Instapaper at 5:00AM and have Instapaper send those articles to my Kindle at 7:00AM.&lt;/p&gt;
&lt;p&gt;The script is as simple as:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ~/path/to/python3 ~/path/to/hackerpaper &lt;span class="at"&gt;-a&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;email&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;password&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; -t topstories&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To recap the routine:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Have &lt;code&gt;hackerpaper&lt;/code&gt; send articles to Instapaper&lt;/li&gt;
&lt;li&gt;Have &lt;code&gt;Instapaper&lt;/code&gt; send those articles to Kindle&lt;/li&gt;
&lt;li&gt;Read and archive those articles&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;</description>
<link>https://liams.me/posts/How_I_read_blogs/</link>
<pubDate>Sun, 15 Nov 2020 05:00:00 +0000</pubDate>
<guid>https://liams.me/posts/How_I_read_blogs/</guid>
</item>
<item>
<title>Useful git aliases</title>
<description>&lt;p&gt;I really enjoy using &lt;code&gt;aliases&lt;/code&gt; for git commands because a) I’m lazy and b) it makes me feel more productive.&lt;/p&gt;
&lt;p&gt;Some basic ones I use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias ga=&amp;quot;git add&amp;quot;
alias gc=&amp;quot;git commit&amp;quot;
alias gd=&amp;quot;git diff&amp;quot;
alias gch=&amp;quot;git checkout&amp;quot;
alias gst=&amp;quot;git status&amp;quot;
alias gp=&amp;quot;git push -u origin master&amp;quot;
alias gpo=&amp;quot;git push origin&amp;quot;
alias gb=&amp;quot;git branch&amp;quot;
alias gcb=&amp;quot;git checkout -b&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These ones are set up in my &lt;code&gt;.bashrc&lt;/code&gt; file so that I can just execute them as is, i.e &lt;code&gt;gc&lt;/code&gt; -&amp;gt; &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some more complex ones (except for fetch) in my &lt;code&gt;.gitconfig&lt;/code&gt; I enjoy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f = fetch
fu = fetch upstream master
track = branch --set-upstream-to=upstream/master master
parent = &amp;quot;!git show-branch | grep &amp;#39;*&amp;#39; | grep -v \&amp;quot;$(git rev-parse --abbrev-ref HEAD)\&amp;quot; | head -n1 | sed &amp;#39;s/.*\\[\\(.*\\)\\].*/\\1/&amp;#39; | sed &amp;#39;s/[\\^~].*//&amp;#39; #&amp;quot;
lg = log --oneline
last = log -1 HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fu&lt;/code&gt; and &lt;code&gt;track&lt;/code&gt; are useful for doing things when I’m working on a forked repository&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parent&lt;/code&gt; shows the parent branch of the current working branch&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lg&lt;/code&gt; shows commit history one line at a time&lt;/p&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt; shows information for the last commit&lt;/p&gt;
&lt;p&gt;Whether they make me more productive or not, I just enjoy using them and see no reason not to.&lt;/p&gt;</description>
<link>https://liams.me/posts/Useful_git_aliases/</link>
<pubDate>Wed, 02 Sep 2020 04:00:00 +0000</pubDate>
<guid>https://liams.me/posts/Useful_git_aliases/</guid>
</item>
<item>
<title>Chaining comparison operators</title>
<description>&lt;p&gt;I recently came across this lesser known feature in Python and started to play around with it.&lt;/p&gt;
&lt;p&gt;Being able to chain comparison operators is a rarity among most modern programming languages, which is a shame considering how elegant and intuitive it turns out to be.&lt;/p&gt;
&lt;p&gt;Here are some examples:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;a, b, c &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;, &lt;span class="dv"&gt;10&lt;/span&gt;, &lt;span class="dv"&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(a &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; b &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above is equivalent to:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;a, b, c &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;, &lt;span class="dv"&gt;10&lt;/span&gt;, &lt;span class="dv"&gt;15&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(a &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; b &lt;span class="kw"&gt;and&lt;/span&gt; b &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; c) &lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And something a bit more complex:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;a, b, c, d, e, f, g &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;, &lt;span class="dv"&gt;10&lt;/span&gt;, &lt;span class="dv"&gt;30&lt;/span&gt;, &lt;span class="dv"&gt;20&lt;/span&gt;, &lt;span class="dv"&gt;15&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;flag &lt;span class="op"&gt;=&lt;/span&gt; a &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; b &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; f &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; c &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; d &lt;span class="kw"&gt;is&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; f &lt;span class="kw"&gt;is&lt;/span&gt; g&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(flag)&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all equivalent to:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;a, b, c, d, e, f, g &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;, &lt;span class="dv"&gt;10&lt;/span&gt;, &lt;span class="dv"&gt;30&lt;/span&gt;, &lt;span class="dv"&gt;20&lt;/span&gt;, &lt;span class="dv"&gt;15&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;flag &lt;span class="op"&gt;=&lt;/span&gt; a &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; b &lt;span class="kw"&gt;and&lt;/span&gt; b &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; f &lt;span class="kw"&gt;and&lt;/span&gt; f &lt;span class="op"&gt;&amp;lt;&lt;/span&gt; c &lt;span class="kw"&gt;and&lt;/span&gt; c &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; d &lt;span class="kw"&gt;and&lt;/span&gt; d &lt;span class="kw"&gt;is&lt;/span&gt; &lt;span class="kw"&gt;not&lt;/span&gt; f &lt;span class="kw"&gt;and&lt;/span&gt; f &lt;span class="kw"&gt;is&lt;/span&gt; g&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;print&lt;/span&gt;(flag)&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see how tedious things might get. Python continues to amaze me with how beautiful and concise it can be.&lt;/p&gt;</description>
<link>https://liams.me/posts/Chaining_comparison_operators/</link>
<pubDate>Tue, 25 Aug 2020 04:00:00 +0000</pubDate>
<guid>https://liams.me/posts/Chaining_comparison_operators/</guid>
</item>
<item>
<title>A few words</title>
<description>&lt;p&gt;This blog exists primarily because I’d like to further develop my ability to write as well as take on interesting topics and share my thoughts or explain them concisely. After all, what better way is there to learn than to teach?&lt;/p&gt;</description>
<link>https://liams.me/posts/A_few_words/</link>
<pubDate>Mon, 24 Aug 2020 04:00:00 +0000</pubDate>
<guid>https://liams.me/posts/A_few_words/</guid>
</item>

    </channel>
</rss>
